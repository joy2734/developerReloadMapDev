{
    "frontend" : "프론트엔드 파트는 UX designer, Web designer, Front-End developer로 구성됩니다. UX 디자이너는 사용자에게 최상의 편리한 경험을 제공하기 위해 사이트의 구성/기능을 담당합니다. Web 디자이너는 이를 디자인으로 멋지게 뽑아내는 것이고, 프론트엔드 개발자는 뽑아낸 디자인을 웹어플리케이션(Web application)으로 구현하는 것입니다. 프론트엔드 개발 시 주요하게 요구되는 스킬은 다음과 같습니다. HTML/CSS/JAVA SCRIPT와 같은 스킬 및 디자인적인 요소도 관여하게 됩니다.",
    "backend": "백엔드는 UI나 GUI로 구성된 화면의 통신이나 요청에 대하여 DB나 인터페이스 등을 통해 시스템 구성 실체에 접근하는 것입니다. 백엔트 파트는 다양하게 나올 수 있는데 그 중의 몇 가지 예로 서버관리자, DB관리자, Back-End developer로 구성됩니다. 서버관리자는 서버 환경설정, 서버구성을 관리하는 것이고, DB관리자는 DB설계 Data관리, 최적화를 하는 것입니다. 백엔드 개발자는 서버를 코딩하는 것이죠. 백엔드 개발 시에는 서버코딩, 서버상에서 DB활용, API제작 등이 주요한 부분이라고 볼 수 있습니다. 이 중에서 JAVA(자바)를 많이 사용하고 Spring 프레임워크 기반으로도 많이 사용합니다. 프레임워크(Frame Work)란 말 그대로 뼈대란 뜻입니다. JAVA 소스 코드를 객체지향 관점에서 더욱 효율적으로 활용할 수 있게 틀을 제공해주는 것이죠.",
    "vue": "다른 단일형 프레임워크와 달리 Vue는 점진적으로 채택할 수 있도록 설계하였습니다. 핵심 라이브러리는 뷰 레이어만 초점을 맞추어 다른 라이브러리나 기존 프로젝트와의 통합이 매우 쉽습니다. 그리고 Vue는 현대적 도구 및 지원하는 라이브러리와 함께 사용한다면 정교한 단일 페이지 응용프로그램을 완벽하게 지원할 수 있습니다. Vue를 알아보기 전에 Vue에 대해 자세히 알고 싶다면 핵심 원칙과 샘플 프로젝트를 바탕으로 설명하는 비디오를 만들었으니, 참고하시면 좋을 것 입니다. 이미 숙련된 프론트엔드 개발자이고 Vue를 다른 라이브러리/프레임워크와 비교하고 싶다면 다른 프레임워크와의 비교를 확인하십시오.",
    "react": "React 애플리케이션 안에서 변경이 일어나는 데이터에 대해서는 “진리의 원천(source of truth)“을 하나만 두어야 합니다. 보통의 경우, state는 렌더링에 그 값을 필요로 하는 컴포넌트에 먼저 추가됩니다. 그러고 나서 다른 컴포넌트도 역시 그 값이 필요하게 되면 그 값을 그들의 가장 가까운 공통 조상으로 끌어올리면 됩니다. 다른 컴포넌트 간에 존재하는 state를 동기화시키려고 노력하는 대신 하향식 데이터 흐름에 기대는 걸 추천합니다. state를 끌어올리는 작업은 양방향 바인딩 접근 방식보다 더 많은 “보일러 플레이트” 코드를 유발하지만, 버그를 찾고 격리하기 더 쉽게 만든다는 장점이 있습니다. 어떤 state든 간에 특정 컴포넌트 안에서 존재하기 마련이고 그 컴포넌트가 자신의 state를 스스로 변경할 수 있으므로 버그가 존재할 수 있는 범위가 크게 줄어듭니다. 또한 사용자의 입력을 거부하거나 변형하는 자체 로직을 구현할 수도 있습니다.",
    "android": "N/A",
    "devOp": "존의 소프트웨어 개발 및 인프라 관리 프로세스를 사용하는 조직보다 제품을 더 빠르게 혁신하고 개선할 수 있습니다. 이러한 빠른 속도를 통해 조직은 고객을 더 잘 지원하고 시장에서 좀 더 효과적으로 경쟁할 수 있습니다.  DevOps 모델에서는 개발팀과 운영팀이 더 이상 \"사일로\"에 묶여 있지 않습니다. 때로는 이 두 팀이 단일팀으로 병합되어 엔지니어가 개발에서 테스트, 배포, 운영에 이르기까지 전체 애플리케이션 수명 주기에 걸쳐 작업하고 단일 기능에 한정되지 않은 광범위한 기술을 개발합니다. 일부 DevOps 모델에서 품질 보증팀과 보안팀 또한 애플리케이션 수명 주기에 걸쳐 개발 및 운영과 좀 더 긴밀하게 통합됩니다. DevOps 팀 전체가 보안을 중점으로 두는 경우 때때로 DevSecOps라고 불립니다. 이러한 팀에서는 DevOps 방식을 사용하여 속도가 느리고 수동으로 수행되던 프로세스를 자동화합니다. 또한, 애플리케이션을 안정적으로 빠르게 운영하고 개선하는 데 도움이 되는 기술 스택과 도구를 사용합니다. 이러한 도구 덕분에 엔지니어는 이전 같았으면 다른 팀의 도움이 필요했을 코드 배포 또는 인프라 프로비저닝과 같이 작업을 독립적으로 수행할 수 있으며, 따라서 팀의 작업 속도가 더욱 빨라집니다."
}